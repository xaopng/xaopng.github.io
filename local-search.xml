<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo配置</title>
    <link href="/posts/e18ede91.html"/>
    <url>/posts/e18ede91.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>文章中博客根目录均使用<code>[BlogRoot]</code>代替</p></blockquote><h2 id="Hexo-文章生成永久链接"><a href="#Hexo-文章生成永久链接" class="headerlink" title="Hexo 文章生成永久链接"></a>Hexo 文章生成永久链接</h2><blockquote><p>Hexo 文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。</p><p>通过这种方式生成的链接非常长，如果我们的 Markdown 使用中文标题，URL 一转码，将是一场灾难</p><p>更难受的是如果我们修改了文章的日期或者标题，那么将导致链接改变，别人或者你分享出去的文章就会 404</p></blockquote><p>所以就有了这种插件，不论你如何修改文章的日期、名称，只要不改变 footer-matter 中的 id 值，那么文章链接永远不会变</p><ol><li><p>安装插件<a href="https://github.com/Rozbo/hexo-abbrlink">hexo-abbrlink</a></p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-abbrlink --save</code></pre></div></li><li><p>修改配置文件<code>_config.yml</code></p><p>修改文章链接格式</p><div class="code-wrapper"><pre><code class="hljs diff"><span class="hljs-deletion">- permalink: :year/:month/:day/:title/</span><span class="hljs-addition">+ permalink: posts/:abbrlink.html</span></code></pre></div><p>在<code>_config.yml</code>文件末尾添加下面配置</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment">## abbrlink config</span><span class="hljs-attr">abbrlink:</span>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span>      <span class="hljs-comment">#support crc16(default) and crc32 进制</span>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span>        <span class="hljs-comment">#support dec(default) and hex  算法</span>  <span class="hljs-attr">drafts:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#(true)Process draft,(false)Do not process draft. false(default) </span>  <span class="hljs-comment">## Generate categories from directory-tree</span>  <span class="hljs-comment">## depth: the max_depth of directory-tree you want to generate, should &gt; 0</span>  <span class="hljs-attr">auto_category:</span>     <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#true(default)</span>     <span class="hljs-attr">depth:</span>        <span class="hljs-comment">#3(default)</span>     <span class="hljs-attr">over_write:</span> <span class="hljs-literal">false</span>   <span class="hljs-attr">auto_title:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto title, it can auto fill the title by path</span>  <span class="hljs-attr">auto_date:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable auto date, it can auto fill the date by time today</span>  <span class="hljs-attr">force:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#enable force mode,in this mode, the plugin will ignore the cache, and calc the abbrlink for every post even it already had abbrlink.</span></code></pre></div></li><li><p>重新编译</p><div class="code-wrapper"><pre><code class="hljs bash">hexo cleanhexo generatehexo server</code></pre></div></li></ol><h2 id="Hexo更换主题"><a href="#Hexo更换主题" class="headerlink" title="Hexo更换主题"></a>Hexo更换主题</h2><blockquote><p>Hexo有很多主题可以选择，这里推荐一些主题</p><ul><li><a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a></li><li><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid</a></li><li><a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu">anzhiyu</a></li><li><a href="https://github.com/solstice23/hexo-theme-argon">argon</a></li></ul></blockquote><p>以butterfly为例，下面是更换主题的步骤</p><ol><li><p>克隆主题文件到<code>[BlogRoot]/themes/butterfly</code>下</p><div class="code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></pre></div></li><li><p>修改<code>[BlogRoot]/_config.yml</code>应用主题</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">butterfly</span></code></pre></div></li><li><p>生成主题配置文件，在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> themes/butterfly/_config.yml ./_config.butterfly.yml</code></pre></div><p>后面修改主题配置修改这个配置文件即可</p></li></ol><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><blockquote><p>官方配置文档： <a href="https://hexo.io/zh-cn/docs/configuration">https://hexo.io/zh-cn/docs/configuration</a></p><p>下面没有特别说明修改的都是<code>[BlogRoot]/_config.fluid.yml</code>配置文件</p></blockquote><h3 id="网站-标签标题"><a href="#网站-标签标题" class="headerlink" title="网站&amp;标签标题"></a>网站&amp;标签标题</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">Hexo</span></code></pre></div><h2 id="Fluid主题配置"><a href="#Fluid主题配置" class="headerlink" title="Fluid主题配置"></a>Fluid主题配置</h2><blockquote><p>官方配置文档：<a href="https://hexo.fluid-dev.com/docs/guide">https://hexo.fluid-dev.com/docs/guide</a></p><p>下面没有特别说明修改的都是<code>[BlogRoot]/_config.fluid.yml</code>配置文件</p></blockquote><h3 id="网站标题"><a href="#网站标题" class="headerlink" title="网站标题"></a>网站标题</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 导航栏的相关配置</span><span class="hljs-attr">navbar:</span>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;Fluid&quot;</span></code></pre></div><h3 id="浏览器标签图标"><a href="#浏览器标签图标" class="headerlink" title="浏览器标签图标"></a>浏览器标签图标</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 用于浏览器标签的图标</span><span class="hljs-attr">favicon:</span> <span class="hljs-string">/img/fluid.png</span></code></pre></div><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 代码块的增强配置</span><span class="hljs-attr">code:</span>  <span class="hljs-comment"># 是否开启复制代码的按钮</span>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># 代码语言</span>  <span class="hljs-attr">language:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-attr">default:</span> <span class="hljs-string">&quot;TEXT&quot;</span>  <span class="hljs-comment"># 代码高亮</span>  <span class="hljs-attr">highlight:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 代码块是否显示行号</span>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 实现高亮的库，对应下面的设置</span>    <span class="hljs-comment"># Options: highlightjs | prismjs</span>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span>    <span class="hljs-attr">highlightjs:</span>      <span class="hljs-comment"># 在链接中挑选 style 填入</span>      <span class="hljs-comment"># See: https://highlightjs.org/demo</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;github gist&quot;</span>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;dark&quot;</span>    <span class="hljs-attr">prismjs:</span>      <span class="hljs-comment"># 在下方链接页面右侧的圆形按钮挑选 style 填入，也可以直接填入 css 链接</span>      <span class="hljs-comment"># See: https://prismjs.com/</span>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span>      <span class="hljs-attr">style_dark:</span> <span class="hljs-string">&quot;tomorrow night&quot;</span>      <span class="hljs-comment"># 设为 true 高亮将本地静态生成（但只支持部分 prismjs 插件），设为 false 高亮将在浏览器通过 js 生成</span>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span></code></pre></div><h3 id="首页背景"><a href="#首页背景" class="headerlink" title="首页背景"></a>首页背景</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-comment"># 首页 Banner 头图，可以是相对路径或绝对路径，以下相同</span>  <span class="hljs-attr">banner_img:</span> <span class="hljs-string">/img/default.png</span>  <span class="hljs-comment"># 头图高度，屏幕百分比</span>  <span class="hljs-comment"># Available: 0 - 100</span>  <span class="hljs-attr">banner_img_height:</span> <span class="hljs-number">100</span>    <span class="hljs-comment"># 头图黑色蒙版的不透明度，available: 0 - 1.0， 1 是完全不透明</span>  <span class="hljs-comment"># Available: 0 - 1.0</span>  <span class="hljs-attr">banner_mask_alpha:</span> <span class="hljs-number">0.3</span></code></pre></div><h3 id="首页副标题"><a href="#首页副标题" class="headerlink" title="首页副标题"></a>首页副标题</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span>  <span class="hljs-comment"># 首页副标题的独立设置</span>  <span class="hljs-attr">slogan:</span>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 为空则按 hexo config.subtitle 显示</span>    <span class="hljs-attr">text:</span> <span class="hljs-string">&quot;对酒当歌，人生几何&quot;</span>    <span class="hljs-comment"># 通过 API 接口作为首页副标题的内容，必须返回的是 JSON 格式，如果请求失败则按 text 字段显示，该功能必须先开启 typing 打字机功能</span>    <span class="hljs-attr">api:</span>      <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span>      <span class="hljs-comment"># 请求地址</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">&quot;&quot;</span>      <span class="hljs-comment"># 请求方法</span>      <span class="hljs-comment"># Available: GET | POST | PUT</span>      <span class="hljs-attr">method:</span> <span class="hljs-string">&quot;GET&quot;</span>      <span class="hljs-comment"># 请求头</span>      <span class="hljs-attr">headers:</span> &#123;&#125;      <span class="hljs-comment"># 从请求结果获取字符串的取值字段，最终必须是一个字符串，例如返回结果为 &#123;&quot;data&quot;: &#123;&quot;author&quot;: &quot;fluid&quot;, &quot;content&quot;: &quot;An elegant theme&quot;&#125;&#125;, 则取值字段为 [&#x27;data&#x27;, &#x27;content&#x27;]；如果返回是列表则自动选择第一项</span>      <span class="hljs-attr">keys:</span> []</code></pre></div><p>一些标语API</p><ul><li><a href="https://v1.hitokoto.cn/">https://v1.hitokoto.cn/</a></li><li><a href="https://v1.jinrishici.com/all.json">https://v1.jinrishici.com/all.json</a></li></ul><h3 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h3><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 导航栏的相关配置</span><span class="hljs-comment"># Navigation bar</span><span class="hljs-attr">navbar:</span>  <span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略，主题内置图标详见这里：https://hexo.fluid-dev.com/docs/icon/；增加 name 可以强制显示指定名称</span>  <span class="hljs-attr">menu:</span>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;    <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span></code></pre></div><h3 id="文章在首页的封面图"><a href="#文章在首页的封面图" class="headerlink" title="文章在首页的封面图"></a>文章在首页的封面图</h3><p>对于单篇文章，在文章开头 <a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置 <code>index_img</code> 属性。</p><div class="code-wrapper"><pre><code class="hljs markdown">---title: 文章标题tags: [Hexo, Fluid]index<span class="hljs-emphasis">_img: /img/example.jpg</span><span class="hljs-emphasis">date: 2019-10-10 10:00:00</span><span class="hljs-emphasis">---</span><span class="hljs-emphasis">以下是文章内容</span></code></pre></div><p><code>/img/example.jpg</code> 对应的是存放在 <code>/source/img/example.jpg</code> 目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>也可以使用外链 Url 的绝对路径。</p><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span></code></pre></div><p>当 <code>default_index_img</code> 和 <code>index_img</code> 都为空时，该文章在首页将不显示图片。</p><h3 id="文章页背景图"><a href="#文章页背景图" class="headerlink" title="文章页背景图"></a>文章页背景图</h3><p>默认显示<strong>主题配置</strong>中的 <code>post.banner_img</code>，如需要设置单个文章的 Banner，在 <a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中指定 <code>banner_img</code> 属性。</p><div class="code-wrapper"><pre><code class="hljs markdown">---title: 文章标题tags: [Hexo, Fluid]index<span class="hljs-emphasis">_img: /img/example.jpg</span><span class="hljs-emphasis">banner_</span>img: /img/post<span class="hljs-emphasis">_banner.jpg</span><span class="hljs-emphasis">date: 2019-10-10 10:00:00</span><span class="hljs-emphasis">---</span><span class="hljs-emphasis">以下是文章内容</span></code></pre></div><p>随机图片api</p><ul><li><a href="https://bing.img.run/api.html">开放API接口 - Bing每日壁纸档案库 (img.run)</a></li><li><a href="https://www.v2ex.com/t/871152">分享一个 Bing 壁纸 API，可以用来装修博客 - V2EX</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Win10:Hexo+github搭建个人博客</title>
    <link href="/posts/9ff9fc00.html"/>
    <url>/posts/9ff9fc00.html</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li><a href="https://nodejs.org/en/">Node.js</a></li></ul><blockquote><p>（建议选择左边的稳定版本，右边的最新版本可能会出现莫名bug）<br>Node.js是基于Chrome的V8 JavaScript引擎构建的运行在服务端的JavaScript开发平台,知道这些就够了。<br>反正作为一个包管理器，安装以后再也不用去打扰它的具体配置。默默运行就是了。</p></blockquote><ul><li><a href="https://git-scm.com/">git</a></li></ul><blockquote><p>可以选择安装版，也可以选择绿色版。<br>绿色版需要加上<code>Git_HOME</code>，<code>%Git_HOME%\bin</code>之类的环境变量，建议下载安装版一路默认安装，安装包会自动添加相应的环境变量。</p></blockquote><ul><li><a href="https://www.typora.io/">Typora</a></li></ul><blockquote><p>typora是一个专业的markdown编辑器，比之atom的最大优势就是同步渲染速度，缺点是对于代码高亮的支持并不是很方便，自带源代码模式 ，拿来看看代码也不错</p></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><blockquote><p>首先给出官方网址:<a href="https://hexo.io/zh-cn/">Hexo官网</a></p><p>具体搭建可以直接看下面的步骤</p></blockquote><ol><li><p>首先需要建立博客文件夹，建议建在非系统盘，例如<code>~D:/Hexo/</code>，那么这个目录就是我们博客的根目录了。因为每个人的命名习惯不同，本帖之后会以<code>[Blogroot]</code>指代博客根目录。</p></li><li><p>使用<code>npm</code>安装<code>Hexo</code>,在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here,输入</p><div class="code-wrapper"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<span class="hljs-comment">#将npm源替换为阿里的镜像。之后的安装就会迅速很多了。</span>npm install hexo-cli -g<span class="hljs-comment"># hexo-cli 是 hexo的指令集。</span>hexo init<span class="hljs-comment"># 有了指令集以后，使用它的初始化指令来初始化安装Hexo博客。</span></code></pre></div></li><li><p>安装插件，依然是在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，使用<code>npm</code>指令挑选需要的插件安装。(请仔细阅读注释，确定你是否需要安装这个插件)。</p><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-generator-index --save<span class="hljs-comment"># 主页插件，最新版Hexo默认安装，可跳过</span>npm install hexo-generator-archive --save<span class="hljs-comment"># 归档插件，最新版Hexo默认安装，可跳过</span>npm install hexo-generator-category --save<span class="hljs-comment"># 分类插件，最新版Hexo默认安装，可跳过</span>npm install hexo-generator-tag --save<span class="hljs-comment"># 标签插件，最新版Hexo默认安装，可跳过</span>npm install hexo-server --save<span class="hljs-comment"># 服务插件，最新版Hexo默认安装，可跳过</span>npm install hexo-renderer-marked --save<span class="hljs-comment"># markdown渲染支持插件，最新版Hexo默认安装，可跳过</span>npm install hexo-renderer-stylus --save<span class="hljs-comment"># nib css支持插件，如无需求，可跳过</span>npm install hexo-generator-feed --save<span class="hljs-comment"># RSS订阅支持插件，如无需求，可跳过</span>npm install hexo-generator-sitemap --save<span class="hljs-comment"># sitemap生成插件，帮助搜索引擎抓取，如无需求，可跳过</span>npm install hexo-admin --save<span class="hljs-comment"># 网页端hexo文档管理插件，如无需求，可跳过</span>npm install hexo-deployer-git --save<span class="hljs-comment"># git部署插件，必须安装</span></code></pre></div></li><li><p>常用命令</p><div class="code-wrapper"><pre><code class="hljs bash">hexo clean<span class="hljs-comment">#清空缓存</span>hexo generatehexo g <span class="hljs-comment">#简写</span><span class="hljs-comment">#重新编译</span>hexo serverhexo s <span class="hljs-comment">#简写</span><span class="hljs-comment">#打开本地访问</span>hexo new &lt;layout&gt; <span class="hljs-string">&quot;文章title&quot;</span><span class="hljs-comment">#新建文章</span>hexo deployhexo d <span class="hljs-comment">#简写</span><span class="hljs-comment">#部署到云端</span></code></pre></div></li><li><p>本地预览：在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">hexo server</code></pre></div><p><img src="http://img.xaopng.top/i/2024/02/27/65dd5a0b6b998.png"></p><p>然后在浏览器中打开<code>localhost:4000</code> ,就能看到</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd5a2ae2ce7.png"></p><p>如果你安装了<code>hexo-admin</code>插件，就可以通过访问<code>localhost:4000/admin</code>来管理你的文章了。并且在可视化界面中操作文章内容。恭喜你，博客的本地部署到这里算是告一段落了。</p></li><li><p>添加分类页面和标签页面</p><ul><li><p>添加分类页面</p><p>在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</p><div class="code-wrapper"><pre><code class="hljs bash">hexo new page categories<span class="hljs-comment"># 创建“分类”页面</span></code></pre></div><p>打开<code>[Blogroot]/sources/categories/index.md</code><br>在它的头部加上<code>type</code>属性。</p><div class="code-wrapper"><pre><code class="hljs diff">  ---  title: categories  date: 2017-05-27 13:47:40<span class="hljs-addition">+ type: &quot;categories&quot;</span>  ---</code></pre></div><p>给文章添加分类，例如我要给<code>Hello-world</code>这篇文章添加分类，打开<code>[Blogroot]/sources/_posts/Hello-woeld.md</code>,修改他的头部内容为：</p><div class="code-wrapper"><pre><code class="hljs diff">  ---  title: Hello-World  date: 2019-04-07 00:38:36<span class="hljs-addition">+ categories: 学习笔记</span>  tags: [node.js, hexo]  ---</code></pre></div></li><li><p>添加标签页面</p><p>在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</p><div class="code-wrapper"><pre><code class="hljs bash">hexo new page tags<span class="hljs-comment"># 创建“标签”页面</span></code></pre></div><p>打开<code>[Blogroot]/sources/tags/index.md</code><br>在它的头部加上<code>type</code>属性</p><div class="code-wrapper"><pre><code class="hljs diff">  ---  title: tags  date: 2017-05-27 13:47:40<span class="hljs-addition">+ type: &quot;tags&quot;</span>  ---</code></pre></div><p>给文章添加标签，例如我要给<code>Hello-world</code>这篇文章添加标签，打开<code>[Blogroot]/sources/_posts/Hello-world.md</code>,修改他的头部内容为：</p><div class="code-wrapper"><pre><code class="hljs diff">  ---  title: Hello-World  date: 2019-04-07 00:38:36  categories: 学习笔记<span class="hljs-addition">+ tags: [node.js, hexo]  # 逗号是英文逗号</span>  ---</code></pre></div><p>第二种写法是用-短划线列出来</p><div class="code-wrapper"><pre><code class="hljs diff">  ---  title: Hello-World  date: 2019-04-07 00:38:36  categories: 学习笔记<span class="hljs-addition">+ tags:</span><span class="hljs-addition">+   - node.js # 注意短线后有空格</span><span class="hljs-addition">+   - 📁Hexo</span>  ---</code></pre></div></li></ul></li></ol><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><ol><li><p>访问官网按照指示注册github账号:<a href="https://github.com/">github</a></p></li><li><p>新建<code>username.github.io</code>仓库:</p><p>注册成功后，在github首页单击头像-&gt;Your repositories<br>在自己的 GitHub 账号下创建一个新的仓库，命名为 <code>username.github.io</code>（username是你的账号名)。</p><blockquote><p>科普：为什么要命名为username.github.io？</p><p>专门写给老实孩子看的，这段主要是为了解释为啥要按照<code>username.github.io</code>这个要求来新建仓库名，不感兴趣的话跳过这段看后面的<code>配置Git 与 GitHub</code>就好，不用追根究底。<br>在这里，要知道，<code>GitHub Pages</code>有两种类型：<code>User/Organization Pages</code> 和 <code>Project Pages</code>，而我所使用的是 <code>User Pages</code>。<br>简单来说，<code>User Pages</code> 与 <code>Project Pages</code> 的区别是：</p><ul><li><code>User Pages</code> 是用来展示用户的，而 <code>Project Pages</code> 是用来展示项目的。</li><li>用于存放<code>User Pages</code>的仓库必须使用 <code>username.github.io</code> 的命名规则，而 <code>Project Pages</code>则没有特殊的要求。</li><li><code>User Pages</code>通过<code>https://username.github.io</code>进行访问，而<code>Projects Pages</code>通过<code>https://username.github.io/projectname</code>进行访问。</li></ul></blockquote></li><li><p>配置<code>Git</code>与<code>GitHub</code>:</p><ul><li>此处为全局配置，所以可以在任意位置打开git bash,设置用户名称和邮件地址</li></ul><div class="code-wrapper"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;akilarlxh&quot;</span>git config --global user.email <span class="hljs-string">&quot;akilarlxh@gmail.com&quot;</span></code></pre></div><ul><li>设置完成后为了能够在本地使用<code>git</code>管理<code>github</code>上的项目，需要绑定<code>SSHkey</code>。</li></ul><div class="code-wrapper"><pre><code class="hljs bash">ssh-keygen -t rsa -C akilarlxh@gmail.com<span class="hljs-comment"># -C后面加你在github的用户名邮箱，这样公钥才会被github认可</span>less ~/.ssh/id_rsa.pub<span class="hljs-comment"># 查看公钥内容稍后加入Github账户的sshkey中,</span></code></pre></div><blockquote><p>这一步骤推荐在<code>git bash</code>中运行指令。若使用<code>powershell</code>或<code>cmd</code>，<code>less</code>指令缺少必要的C语言环境，需要访问<code>C:\Users\Username\.ssh\id_rsa.pub</code>复制。</p></blockquote><ul><li>打开<a href="https://github.com/">github网页</a></li></ul><p>单击头像-&gt;settings,在设置页面找到SSH and GPG keys，单击New SSH key新建<code>SSH KEY</code>。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd77bb6d2a8.png"></p><ul><li>保存后，在git bash测试sshkey是否添加成功，输入</li></ul><div class="code-wrapper"><pre><code class="hljs bash">ssh -T git@github.com<span class="hljs-comment"># Attempts to ssh to GitHub</span></code></pre></div><ul><li>正常输出是</li></ul><div class="code-wrapper"><pre><code class="hljs bash">The authenticity of host <span class="hljs-string">&#x27;github.com (207.97.227.239)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><span class="hljs-string">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><span class="hljs-string">Are you sure you want to continue connecting (yes/no)?</span><span class="hljs-string"># 此处请输入yes</span><span class="hljs-string">Hi username! You&#x27;</span>ve successfully authenticated, but GitHub does notprovide shell access.</code></pre></div><blockquote><p>配置过程中可能遇到的bug</p><p>输出报错为</p><div class="code-wrapper"><pre><code class="hljs bash">ssh: connect to host gitee.com port 22: Connection timed out</code></pre></div><p>这是由于在当前网络环境中，端口22被占用了，我们改用其他端口再试试</p><div class="code-wrapper"><pre><code class="hljs bash">ssh -T -p 443 git@ssh.github.com<span class="hljs-comment"># -p 443表示使用443端口，要是443也被占用，也可以尝试其他端口</span></code></pre></div></blockquote></li><li><p>配置hexo部署插件内容：</p><ul><li>确保你安装了<code>hexo-deployer-git</code>,如果没有，在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</li></ul><div class="code-wrapper"><pre><code class="hljs bash">npm install hexo-deployer-git --save</code></pre></div><ul><li>打开<code>[Blogroot]/_config.yml</code>,修改底部的<code>deploy</code>配置项。如果没有找到<code>deploy</code>配置项,则自己添加：</li></ul><div class="code-wrapper"><pre><code class="hljs yaml"><span class="hljs-comment"># 站点部署到github要配置Deployment</span><span class="hljs-comment">## Docs: https://zespia.tw/hexo/docs/deploy.html</span><span class="hljs-attr">deploy:</span>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span>  <span class="hljs-attr">repo:</span>    <span class="hljs-attr">github:</span>      <span class="hljs-attr">url:</span> <span class="hljs-string">git@github.com:username/username.github.io.git</span>  <span class="hljs-comment"># 记得把username替换为自己的用户名</span>      <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span> <span class="hljs-comment">#2020年10月后github新建仓库默认分支改为main，注意修改</span>    <span class="hljs-comment"># 也可以用另一种写法,二选一即可</span>    <span class="hljs-attr">github:</span> <span class="hljs-string">git@github.com:username/username.github.io.git,master</span></code></pre></div><blockquote><p>这里<code>deploy</code>前面不要有<code>空格</code>，而所有<code>:</code>后面都要有空格。对齐缩进情况要严格按照示例来写。<code>yml</code>编译对缩进要求很严格，所以格式很重要。</p></blockquote></li><li><p>把本地<code>hexo</code>博客内容提交到<code>git</code>仓库</p><ul><li>若以上内容已经准确配置，在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</li></ul><div class="code-wrapper"><pre><code class="hljs bash">hexo cleanhexo generatehexo deploy</code></pre></div><p>不出意外，就可以在浏览器上输入<code>https://username.github.io</code>访问你的博客了。<br>（记得替换<code>username</code>为自己的用户名。</p></li></ol><h2 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h2><ol><li><p>购买域名</p><ul><li><p><a href="https://dnspod.cloud.tencent.com/">腾讯云域名注册</a></p></li><li><p><a href="https://wanwang.aliyun.com/">阿里云域名注册</a></p><p>购买成功后按照网站提示逐步完成域名实名认证和域名信息，等待下发域名证书。（审核速度很快，实名信息上传到电子证书下发还不到半小时）<br>关于备案：因为<code>Hexo</code>博客是托管在<code>github</code>上的，所以，除非你购买的域名是<code>.cn</code>后缀的，或者你给博客使用的某些插件需要部署在另外的云服务上这两种情况，否则是不需要备案的。</p></li></ul></li><li><p>绑定域名</p><p>为了能够使用自己的域名访问我们的博客，需要再进行域名绑定：</p><ul><li><p>首先要获取博客当前默认域名的<code>IP</code>,打开<code>cmd</code>或者<code>powershell</code>，输入</p><div class="code-wrapper"><pre><code class="hljs bash">ping username.github.io<span class="hljs-comment"># username记得替换成你的用户名</span></code></pre></div><p><img src="http://img.xaopng.top/i/2024/02/27/65dd79570b13b.png"></p><blockquote><p>若ping返回的是ipv地址，如下图</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd8359b0d22.png" alt="image-20240227143816259"></p><p>输入下面命令</p><div class="code-wrapper"><pre><code class="hljs bash">ping username.github.io -4<span class="hljs-comment"># username记得替换成你的用户名</span></code></pre></div></blockquote></li><li><p>获取到的<code>ip</code>地址填入域名解析。</p><p>这里以腾讯云为例。进入控制台-&gt;域名注册-&gt;我的域名。在购买的域名的操作栏选择解析。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd798f9a906.png"></p><p>进入解析页面后需要添加两条记录。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd79a73d82c.png"></p><blockquote><p>关于为什么要添加两条记录。此处有必要说明一下，实质起作用的其实是第一条<code>A</code>记录，而第二条<code>CNAME</code>记录指向的其实是<code>www</code>的二级域名。例如此处指向<code>www.akilar.top</code>。然后当有人用<code>www.akilar.top</code>访问时，会重定向到<code>akilar.top</code>。emmm,虽然看起来有点多此一举啦，但是<a href="https://android99.me/">@安卓大佬</a>说这样可以提升访问成功几率。毕竟很多人习惯在域名前面敲个<code>www</code>。</p></blockquote></li></ul></li><li><p>在<code>[Blogroot]\source\</code>目录下新建<code>CNAME</code>文件（注意不要有后缀名，就叫<code>CNAME</code>即可，什么<code>.txt</code>、<code>.js</code>之类的后缀都不能有），在<code>CNAME</code>文件中添加上你购买的域名。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd7a135efd2.png"></p></li><li><p>在<code>[Blogroot]\source\</code>目录下新建<code>CNAME</code>文件（注意不要有后缀名，就叫<code>CNAME</code>即可，什么<code>.txt</code>、<code>.js</code>之类的后缀都不能有），在<code>CNAME</code>文件中添加上你购买的域名。</p></li><li><p>配置<code>username.github.io</code>仓库。</p><p>打开<code>username.github.io</code>，点击仓库页面右上角的setting</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd7a41160d4.png"></p><p>下拉找到Github Pages栏，在Custom domain中填入你购买的域名。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd7a6256f25.png"></p></li><li><p>最后，重新部署一下<code>hexo</code>即可通过你的域名来访问博客了。</p><div class="code-wrapper"><pre><code class="hljs bash">hexo cleanhexo generatehexo depoly</code></pre></div></li></ol><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><h3 id="源码存放方案：开源or闭源"><a href="#源码存放方案：开源or闭源" class="headerlink" title="源码存放方案：开源or闭源"></a>源码存放方案：开源or闭源</h3><ul><li><p>源码保密，仅开源网页</p><blockquote><p>如果按照我现在的方式进行双分支部署，虽然可以在一个仓库内同时管理博客源码和博客生成的网页文件，但是基于<code>gitpage</code>必须是开放的性质，你的博客源码将是完全开源的，任何人都能通过<code>git clone</code>拷贝你的博客源码，唯一的区别就是在没有绑定<code>SSH Key</code>的情况下他们不可能提交到你的库内。</p></blockquote><p>所以，对源码有保密需求的，可以参照以下方式另外新建一个保密仓库作为源码存放库。</p><ol><li><p>创建存放源码的私有仓库</p><p>我们需要创建一个用来存放<code>Hexo</code>博客源码的私有仓库<code>[SourceRepo]</code>，这点在Win10的<code>Hexo</code>博客搭建教程中有提到。为了保持教程的连贯，此处再写一遍。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd7b9ba73b4.png"></p><p>创建完成后，需要把博客的源码<code>push</code>到这里。首先获取远程仓库地址，此处虽然<code>SSH</code>和<code>HTTPS</code>均可。<code>SSH</code>在绑定过<code>ssh key</code>的设备上无需再输入密码，<code>HTTPS</code>则需要输入密码，但是<code>SSH</code>偶尔会遇到端口占用的情况。请自主选择。</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd7bc0e63fc.png"></p></li><li><p>在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入</p><div class="code-wrapper"><pre><code class="hljs bash">git init <span class="hljs-comment"># 初始化git</span></code></pre></div><p>这一步会在你的博客目录下新建一个<code>.git</code>文件夹。因为是隐藏文件夹，所以需要你先确保当前目录下隐藏文件夹可见才能看到它。</p></li><li><p>在远端提交前，我们需要先调整一下屏蔽项，能够使用指令进行安装的内容不包括在需要提交的源码内，这样可以显著减少需要提交的文件量和加快提交速度。打开<code>[Blogroot]/.gitignore</code>（也是隐藏文件）,输入以下内容：</p><div class="code-wrapper"><pre><code class="hljs txt">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/.deploy_git*/.ideathemes/butterfly/.git</code></pre></div><p>如果不是<code>butterfly</code>主题，记得替换最后一行内容为你自己当前使用的主题。</p></li><li><p>然后尝试第一次提交你的目录到远程仓库,依然是在<code>[Blogroot]</code>路径下右键-&gt;Git Bash Here，输入：</p><div class="code-wrapper"><pre><code class="hljs bash">git add . <span class="hljs-comment"># 添加文件到本地仓库</span>git commit -m <span class="hljs-string">&quot;自定义内容即可&quot;</span> <span class="hljs-comment"># 添加文件描述信息</span>git remote add origin git@github.com:username/YourRepositoryName.git <span class="hljs-comment">#链接远程仓库地址，创建主分支</span>git push -u origin main</code></pre></div></li><li><p>偶尔会遇到一些与远端内容不一致的问题，一般是因为在创建远程仓库时点选了生成<code>README.md</code>或者<code>license</code>的选项，输入指令：</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 要是提示origin已经存在，那么执行</span>git remote <span class="hljs-built_in">rm</span> origin<span class="hljs-comment"># 然后再重新尝试</span>git remote add origin git@github.com:username/YourRepositoryName.gitgit pull origin YourBranchName <span class="hljs-comment"># 把远程仓库的新增的内容覆盖到本地仓库</span>git push -u origin YourBranchName -f<span class="hljs-comment"># 把本地仓库的文件推送到远程仓库的主分支，</span><span class="hljs-comment">#YourBranchName记得替换成分支名，一般是master。</span><span class="hljs-comment">#2020年10月后github新建仓库默认分支改为main</span><span class="hljs-comment"># -f 是强制提交，主要是因为前后版本不一致造成的。</span><span class="hljs-comment"># 然后执行以下指令生成网站并部署到 GitHub 上。</span><span class="hljs-comment">#(Hexo部署网站是根据_config.yml内的配置，所以不受影响）</span>hexo generatehexo deploy</code></pre></div></li></ol></li></ul><h3 id="博客管理流程"><a href="#博客管理流程" class="headerlink" title="博客管理流程"></a>博客管理流程</h3><p>在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理</p><ol><li><p>依次执行指令</p><div class="code-wrapper"><pre><code class="hljs bash">git add .git commit -m <span class="hljs-string">&quot;...&quot;</span>git push<span class="hljs-comment"># 将改动推送到 GitHub</span></code></pre></div></li><li><p>然后才执行</p><div class="code-wrapper"><pre><code class="hljs bash">hexo generate -d<span class="hljs-comment"># 或者</span>hexo g -d</code></pre></div><p>将本地文件发布网站到<code>master</code>分支上。(2020年10月后github新建仓库默认分支由master改为main)</p></li></ol><h3 id="本地资料丢失或多PC同步"><a href="#本地资料丢失或多PC同步" class="headerlink" title="本地资料丢失或多PC同步"></a>本地资料丢失或多PC同步</h3><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li><p>使用<code>git clone git@github.com:Username/[HexoSourceRepo].git</code>拷贝仓库；<br>此处的<code>[HexoSourceRepo]</code>指代上述博客源码存放方案中存放源码的仓库名。</p></li><li><p>在本地新拷贝的<code>[HexoSourceRepo]</code>文件夹下通过终端依次执行下列指令：</p><div class="code-wrapper"><pre><code class="hljs bash">npm install -g hexo-clinpm install</code></pre></div></li></ol><h3 id="指令脚本"><a href="#指令脚本" class="headerlink" title="指令脚本"></a>指令脚本</h3><ul><li><p>普通版</p><p>每次都要反复敲那么几行指令一定会无聊，那么干脆把指令存在脚本里，每次需要用到的时候双击一下就可以高枕无忧了。<br>在<code>[Blogroot]</code>文件夹下新建三个<code>txt</code>文件，分别命名为<code>git-pull</code>、<code>git-push</code>、<code>hexo-publish</code>,打开后依次在里面输入相应的命令。</p><ul><li><p>git-pull（用来从远程仓库拉取最新更改，适用于多PC或多系统端之间的版本对接）</p><div class="code-wrapper"><pre><code class="hljs bash">git pull</code></pre></div></li><li><p>git-push（用于提交每次的修改到远程仓库）</p><div class="code-wrapper"><pre><code class="hljs bash">git add .git commit -m <span class="hljs-string">&quot;deploy from hexo-admin&quot;</span>git push</code></pre></div></li><li><p>hexo-publish（清空本地缓存后重新部署博客页面）</p><div class="code-wrapper"><pre><code class="hljs bash">hexo cleanhexo generatehexo depoly</code></pre></div><p>之后将<code>.txt</code>后缀更改为<code>.sh</code>后缀，就是一个可执行脚本了。</p></li></ul></li><li><p>升级版</p><p>在hexo根目录<code>[blogroot]/</code>下新建一个脚本文件：<code>menu.sh</code>,将以下内容复制进去。</p><div class="code-wrapper"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><span class="hljs-comment">#本脚本用于群友交流，完全开源，可以随意传阅，不过希望保留出处。</span><span class="hljs-comment">#Author：Akilar</span><span class="hljs-comment">#Modify:Hajeekn(SL)</span><span class="hljs-comment">#Updated: 2021-08-09</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==================================================&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;              欢迎使用Hexo控制脚本!&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;                更方便的魔改版本&quot;</span><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;==================================================&quot;</span>HexoPath=$(<span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(dirname <span class="hljs-string">&quot;<span class="hljs-variable">$0</span>&quot;</span>)</span>&quot;</span>; <span class="hljs-built_in">pwd</span>)<span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m Blog 根目录：&quot;</span><span class="hljs-variable">$&#123;HexoPath&#125;</span><span class="hljs-string">&quot;\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [0] \033[0m 退出菜单\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[31m =============以下功能需要在空文件夹内使用========\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [1] \033[0m 初始化安装Hexo（仅在第一次安装时使用）\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [2] \033[0m 从云端恢复Hexo\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[31m =============以下功能需要在Hexo文件夹内使用======\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [3] \033[0m 开启本地预览\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [4] \033[0m 重新编译后开启本地预览\033[33m（修改过_config.yml需使用这个才能看到变化）\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [5] \033[0m 新建博客文章\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [6] \033[0m 新建博客页面\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [7] \033[0m 部署页面到博客网站\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [8] \033[0m 从Github拉取最新版本\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [9] \033[0m 提交本地修改到GitHub\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [10] \033[0m 升级Hexo及插件\033[31m（慎用）\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [11] \033[0m 重新安装依赖\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [12] \033[0m 安装butterfly主题\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [13] \033[0m 安装volantis主题\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [14] \033[0m 安装Hexo-Admin \033[33m(用于管理或撰写Hexo博文，适合初学者使用)\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[31m =============以下功能为全局指令==================\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [15] \033[0m 安装ssh密钥\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [16] \033[0m 验证ssh密钥\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [17] \033[0m 切换npm源为阿里镜像\033[33m (当使用publish命令时会出现错误,适用于不发布包的人)\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [18] \033[0m 切换npm源为官方源\033[33m (安装慢,但可以使用所有命令)\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [19] \033[0m 安装 Git\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32m [20] \033[0m 安装 Node.js\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;请选择需要的功能，默认选择\033[32m [3] \033[0m开启本地预览\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;选择：\n&quot;</span><span class="hljs-built_in">read</span> answer<span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;1&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在初始化,请坐和放宽...\n&quot;</span><span class="hljs-built_in">mkdir</span> Hexo<span class="hljs-built_in">cd</span> Hexonpm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.comnpm install -g hexo-clihexo initnpm install --savenpm install hexo-deployer-git --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请查看您当前的Hexo版本...\n&quot;</span>hexo version<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装完成，您可以开始您的Hexo之旅了！\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[33m请将本脚本文件放入Hexo文件夹以继续使用其他功能！\033[0m\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[31m请将本脚本文件放入Hexo文件夹以继续使用其他功能！\033[0m\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">exit</span> 0<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;2&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 启动拉取器 ...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;请输入仓库源码地址: &quot;</span><span class="hljs-built_in">read</span> giturlgit <span class="hljs-built_in">clone</span> <span class="hljs-variable">$&#123;giturl&#125;</span> Hexo<span class="hljs-built_in">cd</span> Hexo<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 恢复Hexo中...\n&quot;</span>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.comnpm install -g hexo-cli<span class="hljs-comment"># npm install gulp-cli -g #全局安装gulp，未配置不用开启</span>npm install --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 恢复完成，您可以开始您的Hexo之旅了！\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请将本脚本文件放入Hexo文件夹以继续使用其他功能！\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[33m请将本脚本文件放入Hexo文件夹以继续使用其他功能！\033[0m\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[31m请将本脚本文件放入Hexo文件夹以继续使用其他功能！\033[0m\n&quot;</span><span class="hljs-built_in">sleep</span> 5s<span class="hljs-built_in">exit</span> 0<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;3&quot;</span> ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在启动本地预览，可以按Ctrl+C退出\n&quot;</span>hexo s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;4&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在清理本地缓存...\n&quot;</span>hexo clean<span class="hljs-comment"># printf &quot;\033[32mINFO \033[0m 正在更新番剧列表...\n&quot;</span><span class="hljs-comment"># hexo bangumi -u #bilibili追番插件，未配置无需开启</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在重新编译静态页面...\n&quot;</span>hexo generate<span class="hljs-comment"># printf &quot;\033[32mINFO \033[0m 正在压缩静态资源...\n&quot;</span><span class="hljs-comment"># gulp #gulp插件，未配置无需开启</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在开启本地预览，可以按Ctrl+C退出\n&quot;</span>hexo server<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;5&quot;</span> ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请输入您想要新建的文章标题\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[33m标题中的各类标点符号和空格，请用短横\&quot;-\&quot;代替！\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;您的文章标题：&quot;</span><span class="hljs-built_in">read</span> posttitlehexo new post <span class="hljs-variable">$&#123;posttitle&#125;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 新建完成，正在尝试为您打开文章文件\n&quot;</span>start <span class="hljs-variable">$&#123;HexoPath&#125;</span>/source/_posts/<span class="hljs-variable">$&#123;posttitle&#125;</span>.md<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;6&quot;</span> ] || [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请输入您想要新建的页面名称\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m \033[33m名称中的各类标点符号和空格，请用短横\&quot;-\&quot;代替！\033[0m\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;您的页面名称：&quot;</span><span class="hljs-built_in">read</span> pagenamehexo new page <span class="hljs-variable">$&#123;pagename&#125;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 新建完成，正在尝试为您打开页面文件\n&quot;</span>start <span class="hljs-variable">$&#123;HexoPath&#125;</span>/source/<span class="hljs-variable">$&#123;pagename&#125;</span>/index.md<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;7&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在清理本地缓存...\n&quot;</span>hexo clean<span class="hljs-comment"># printf &quot;\033[32mINFO \033[0m 正在更新番剧列表...\n&quot;</span><span class="hljs-comment"># hexo bangumi -u #bilibili追番插件，未配置无需开启</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在重新编译静态页面...\n&quot;</span>hexo generate<span class="hljs-comment"># printf &quot;\033[32mINFO \033[0m 正在压缩静态资源...\n&quot;</span><span class="hljs-comment"># gulp #gulp插件，未配置无需开启</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在准备将最新修改部署至Hexo...\n&quot;</span>hexo deploy<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 部署完成，您的网站已经是最新版本！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;8&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在启动拉取器...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;请输入分支名: &quot;</span><span class="hljs-built_in">read</span> branchgit pull origin <span class="hljs-variable">$branch</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 拉取完毕，您的博客已是最新版本！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;9&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在提交最新修改到GitHub...\n&quot;</span>git add .git commit -m <span class="hljs-string">&quot;Update posts content&quot;</span>git push origin <span class="hljs-variable">$branch</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 提交完毕，您的修改已上传至Github！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;10&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请先确认当前版本 ...\n&quot;</span>hexo version<span class="hljs-built_in">sleep</span> 3s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 即将为您全局升级hexo-cli...\n&quot;</span>npm install hexo-cli -g<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m hexo-cli升级完成，请查看当前版本。\n&quot;</span>hexo version<span class="hljs-built_in">sleep</span> 3s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 即将为您升级npm-check...\n&quot;</span>npm install -g npm-check<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m npm-check升级完成！\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在使用npm-check检查系统是否有可升级插件...\n&quot;</span>npm-check<span class="hljs-built_in">sleep</span> 3s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 即将为您升级npm-upgrade...\n&quot;</span>npm install -g npm-upgrade<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在使用npm-upgrade升级插件...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 您可以在接下来的过程中主动选择是否升级插件\n&quot;</span>npm-upgrade<span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在为您保存升级结果...\n&quot;</span>npm update -gnpm update --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 恭喜您，您的Hexo已经是最新版本\n&quot;</span><span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;11&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在清空当前依赖环境 ...\n&quot;</span><span class="hljs-built_in">rm</span> node_modules<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在清空当前依赖关系锁定 ...\n&quot;</span><span class="hljs-built_in">rm</span> package-lock.json<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在清空当前依赖关系缓存 ...\n&quot;</span>npm cache clean --force<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在将npm源替换为阿里云镜像 ...\n&quot;</span>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在重新安装当前依赖环境 ...\n&quot;</span>npm install<span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;12&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在为您下载最新稳定版butterfly主题 ...\n&quot;</span>git <span class="hljs-built_in">clone</span> -b master https://gitee.com/iamjerryw/hexo-theme-butterfly.git themes/butterfly<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在为您安装必要依赖！\n&quot;</span>npm install hexo-renderer-pug hexo-renderer-stylus --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装完成，感谢您对butterfly的支持！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请在/Hexo/_config.yml中将theme修改为butterfly以激活主题！\n&quot;</span><span class="hljs-built_in">sleep</span> 3s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;13&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在为您下载最新稳定版volantis主题 ...\n&quot;</span>git <span class="hljs-built_in">clone</span> https://github.com/volantis-x/hexo-theme-volantis themes/volantis<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在安装本地搜索必要依赖！\n&quot;</span>npm install hexo-generator-search --savenpm install hexo-generator-json-content --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在安装页面渲染必要依赖！\n&quot;</span>npm install hexo-renderer-stylus --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装完成，感谢您对volantis的支持！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请在/Hexo/_config.yml中将theme修改为volantis以激活主题！\n&quot;</span><span class="hljs-built_in">sleep</span> 3s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;14&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在为您下载Hexo-Admin插件 ...\n&quot;</span>npm install hexo-admin --save<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装完成，即将为您启动本地预览！\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 请访问 http://localhost:4000/admin/ 进行博文编辑！\n&quot;</span><span class="hljs-built_in">sleep</span> 2shexo server<span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;15&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在启动Git工具...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;请输入 GitHub 用户名: &quot;</span><span class="hljs-built_in">read</span> githubuser<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;请输入 GitHub 邮箱: &quot;</span><span class="hljs-built_in">read</span> githubemailgit config --global user.name <span class="hljs-string">&quot;<span class="hljs-variable">$githubuser</span>&quot;</span>git config --global user.email <span class="hljs-string">&quot;<span class="hljs-variable">$githubemail</span>&quot;</span>ssh-keygen -t rsa -C <span class="hljs-variable">$githubemail</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 即将打开sshkey，复制后可按 Ctrl+D 返回...\n&quot;</span><span class="hljs-built_in">sleep</span> 2sless ~/.ssh/id_rsa.pub<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 配置完成，请将sshkey添加到Github！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;16&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在验证SSHkey是否配置成功 ...\n&quot;</span>ssh -T git@github.com<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 验证完毕，您的SSHkey已成功绑定至Github！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;17&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在查询当前npm源 ...\n&quot;</span>npm config get registry<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在将npm源替换为阿里云镜像 ...\n&quot;</span>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;18&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在查询当前npm源 ...\n&quot;</span>npm config get registry<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 正在将npm源替换为官方源 ...\n&quot;</span>npm config <span class="hljs-built_in">set</span> registry https://registry.npmjs.org<span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;19&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装 Git 暂不支持linux、macos,如果你是linux或macos用户,请使用系统自带的包管理器安装 ...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 启动下载器 ...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;安装默认使用32包,如果要安装64请更改sh源码或手动将32替换为64 ...\n&quot;</span><span class="hljs-built_in">mkdir</span> temp<span class="hljs-built_in">cd</span> tempcertutil -urlcache -<span class="hljs-built_in">split</span> -f https://npmmirror.com/mirrors/git-for-windows/v2.32.0.windows.2/Git-2.32.0.2-32-bit.exe./Git-2.32.0.2-32-bit.exe<span class="hljs-built_in">rm</span> -r temp<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;安装完成&quot;</span><span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;20&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 安装 Node.js 暂不支持linux、macos,如果你是linux或macos用户,请使用系统自带的包管理器安装 ...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 启动下载器 ...\n&quot;</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;安装默认使用32包,如果要安装64请更改sh源码或手动将32替换为64 ...\n&quot;</span><span class="hljs-built_in">mkdir</span> temp<span class="hljs-built_in">cd</span> tempcertutil -urlcache -<span class="hljs-built_in">split</span> -f https://npmmirror.com/mirrors/node/latest-v12.x/node-v12.22.3-x86.msi./node-v12.22.3-x86.msi<span class="hljs-built_in">cd</span> ../<span class="hljs-built_in">rm</span> -r temp<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;安装完成&quot;</span><span class="hljs-built_in">sleep</span> 2s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">else</span><span class="hljs-keyword">if</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;answer&#125;</span>&quot;</span> = <span class="hljs-string">&quot;0&quot;</span> ]; <span class="hljs-keyword">then</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[32mINFO \033[0m 欢迎下次光临！\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exit</span> 0<span class="hljs-keyword">else</span><span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\033[31mERROR \033[0m 输入错误，请返回重新选择...\n&quot;</span><span class="hljs-built_in">sleep</span> 1s<span class="hljs-built_in">exec</span> <span class="hljs-variable">$&#123;HexoPath&#125;</span>/menu.sh<span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span><span class="hljs-keyword">fi</span></code></pre></div><p>复制后记得按照注释信息修改个人账户和邮箱。</p><p>界面效果如下：</p><p><img src="http://img.xaopng.top/i/2024/02/27/65dd804290353.png"></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
